---
import { PUBLIC_GA_TRACKING_ID, ENABLE_LIGHTBOX } from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath, filePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import GoogleAnalytics from '../components/GoogleAnalytics.astro'
import Socials from '../components/Socials.astro'
import Footer from '../components/Footer.astro'
import BlogTagsLink from '../components/BlogTagsLink.astro'
import { NUMBER_OF_POSTS_PER_PAGE } from '../server-constants.ts'

import {
  getPosts,
  getRankedPosts,
  getAllTags,
  getNumberOfPages,
} from '../lib/notion/client.ts'

const [posts, rankedPosts, tags, numberOfPages] = await Promise.all([
  getPosts(NUMBER_OF_POSTS_PER_PAGE),
  getRankedPosts(),
  getAllTags(),
  getNumberOfPages(),
])


export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase()

const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(getStaticFilePath('/ogp.png'), Astro.site)

let coverImageURL: string
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url))
    } catch (err) {
      console.log('Invalid DB cover image URL')
    }
  }
}

let customIconURL: string
if (database.Icon && database.Icon.Type === 'file') {
  try {
    customIconURL = filePath(new URL(database.Icon.Url))
  } catch (err) {
    console.log('Invalid DB custom icon URL')
  }
}

const asidePaddingTop = coverImageURL ? '200px' : '60px'
import { ViewTransitions } from 'astro:transitions';
---

<!DOCTYPE html>
<html lang="en" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={database.Title} />
    <meta property="og:image" content={ogImage || siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={ogImage || siteOGImage} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.6/flowbite.min.css" rel="stylesheet" />

  </head>
  <body class="bg-white">
    <GoogleAnalytics trackingId={'G-0RSTYH737D'} />
    <div class="">
      <main>
        {
          (
        <div class="md:m-4 mt-2 md:rounded-xl font-mono md:p-8 p-2">
          <div class="flex">
            <a href="/" class="bg-container text-primary rounded-full flex items-center justify-center shrink p-4 text-xl my-6 border font-bold">&larr;<p class="font-bold text-sm text-secondary">Back to Home</p></a>
          </div>
          <a href={getNavLink('/blog')} class="flex mb-2 text-4xl md:text-5xl font-mono font-bold">
            {
                    database.Icon && database.Icon.Type === 'emoji' ? (
                      <>
                        <span>{database.Icon.Emoji}</span>
                        {database.Title}
                      </>
                    ) : database.Icon && database.Icon.Type === 'external' ? (
                      <>
                        <img src={database.Icon.Url} />
                        {database.Title}
                      </>
                    ) : database.Icon && database.Icon.Type === 'file' ? (
                      <>
                        <img src={customIconURL} class="custom-icon" />
                        {database.Title}
                      </>
                    ) : (
                      database.Title
                    )
                  }
            </a>
          <BlogTagsLink heading="Categories / カテゴリ" tags={tags} />
        </div>
        )
        }

        <div class="content md:m-4 my-4 rounded-3xl font-mono bg-surface md:p-8 text-black md:border-2 py-8 p-2 flex justify-center items-center">
          <slot name="main" />
        </div>
      </main>
    </div>

    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} />
      )
    }
  </body>
  <footer class="">
    <Footer
    Sheet="Socials!B2:G100"
    /> 
  </footer>
</html>

<style>
body{
  background-image: linear-gradient(0deg, transparent 31px, #9ca3af 32px),linear-gradient(90deg,  transparent 31px, #9ca3af 32px);
  background-size: 32px 32px;
} 
</style>


